---
- name: Generate the wireguard server private key.
  ansible.builtin.command:
    cmd: wg genkey
  register: server_genkey
  failed_when: server_genkey.rc != 0
  changed_when: false

- name: Generate the wireguard client private key.
  ansible.builtin.command:
    cmd: wg genkey
  register: client_genkey
  failed_when: client_genkey.rc != 0
  changed_when: false

- name: Retrieve server public key from the private key.
  ansible.builtin.shell: echo {{ server_genkey.stdout }} | wg pubkey
  register: server_pubkey
  failed_when: server_pubkey.rc != 0
  changed_when: false

- name: Retrieve client public key from the private key.
  ansible.builtin.shell: echo {{ client_genkey.stdout }} | wg pubkey
  register: client_pubkey
  failed_when: client_pubkey.rc != 0
  changed_when: false

- name: Get the interface used by the ipv4 connection.
  ansible.builtin.shell: ip -o -4 addr show | awk '{print $2" "$4}' | grep {{ server['network']['ipv4'] }} | cut -d ' ' -f 1
  register: interface
  failed_when: interface.rc != 0
  changed_when: false

- name: Copy wg0.conf.
  ansible.builtin.template:
    src: wg0.conf
    dest: /etc/wireguard/
    owner: root
    group: root
    mode: 0600
  vars:
    wg_server_private_key: "{{ server_genkey.stdout }}"
    wg_client_public_key: "{{ client_pubkey.stdout }}"
    wg_interface: "{{ interface.stdout }}"
  become: true

- name: Copy wg0_client.conf.
  ansible.builtin.template:
    src: wg0_client.conf
    dest: "{{ ansible_user_dir }}/wg0.conf"
    mode: 0600
  vars:
    wg_server_public_key: "{{ server_pubkey.stdout }}"
    wg_client_private_key: "{{ client_genkey.stdout }}"
