---
- name: Create all nginx-proxy subdirectories.
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner_group }}"
    group: "{{ item.owner_group }}"
    mode: "{{ item.mode | default('0700') }}"
  become: true
  loop:
    - { path: "{{ containers['config_dir'] }}/nginx-proxy/conf.d/", owner_group: root, enabled: true }
    - { path: "{{ containers['logs_dir'] }}/nginx-proxy/", owner_group: root, enabled: true }
    - { path: "{{ containers['data_dir'] }}/nginx-proxy/", owner_group: root, enabled: "{{ ssl_need }}" }
    - { path: "{{ containers['config_dir'] }}/nginx-proxy/templates/", owner_group: root, enabled: "{{ template_folder_need }}" }
  when: item.enabled|bool

- name: Create all letsencrypt subdirectories.
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: 1100
    group: 1100
    mode: "{{ item.mode | default('0700') }}"
  become_method: containers.podman.podman_unshare
  become: true
  loop:
    - { path: "{{ containers['data_dir'] }}/letsencrypt/www", mode: '0755' }
    - { path: "{{ containers['data_dir'] }}/letsencrypt/lib" }
    - { path: "{{ containers['logs_dir'] }}/letsencrypt/" }
  when: "certbot_needed"

- name: Copy all http templates and nginx templates.
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0700
  become: true
  loop:
    - { src: files/nginx_templates/ssl.tmpl, dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/", enabled: "{{ ssl_need }}" }
    - { src: files/nginx_templates/misc.tmpl, dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/", enabled: "{{ misc_tmpl_need }}" }
    - { src: files/nginx_templates/common.tmpl, dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/", enabled: "{{ common_tmpl_need }}" }
    - { src: files/nginx_templates/proxy_headers.tmpl, dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/",
        enabled: "{{ keycloak['enabled'] }}" }
    - { src: files/nginx_templates/proxy_headers.tmpl, dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/", enabled: "{{ common_tmpl_need }}" }
    - { src: files/nginx_templates/mailu_proxy.tmpl, dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/", enabled: "{{ mailu['enabled'] }}" }
    - { src: files/nginx_templates/mail_ssl.tmpl, dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/", enabled: "{{ mailu['enabled'] }}" }
  when: item.enabled|bool

- name: Copy all nginx configs.
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0600
  become: true
  loop:
    - { src: nginx_proxy/nginx.conf, dest: "{{ containers['config_dir'] }}/nginx-proxy/", enabled: true }
    - { src: nginx_proxy/conf.d/default.http.conf, dest: "{{ containers['config_dir'] }}/nginx-proxy/conf.d/", enabled: true }
    - { src: nginx_proxy/conf.d/bind9.stream.conf, dest: "{{ containers['config_dir'] }}/nginx-proxy/conf.d/",
        enabled: "{{ dns['enabled'] or mailu['enabled'] }}" }
    - { src: nginx_proxy/conf.d/homer.http.conf, dest: "{{ containers['config_dir'] }}/nginx-proxy/conf.d/", enabled: "{{ homer['enabled'] }}" }
    - { src: nginx_templates/homer_geo.tmpl,
        dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/", enabled: "{{ homer['enabled'] }}" }
    - { src: nginx_proxy/conf.d/keycloak.http.conf, dest: "{{ containers['config_dir'] }}/nginx-proxy/conf.d/", enabled: "{{ keycloak['enabled'] }}" }
    - { src: nginx_templates/local_access.tmpl, dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/",
        enabled: "{{ admin_wireguard['enabled'] and keycloak['enabled'] }}" }
    - { src: nginx_proxy/conf.d/mailu.http.conf, dest: "{{ containers['config_dir'] }}/nginx-proxy/conf.d/", enabled: "{{ mailu['enabled'] }}" }
    - { src: nginx_proxy/conf.d/mailu.mail.conf, dest: "{{ containers['config_dir'] }}/nginx-proxy/conf.d/", enabled: "{{ mailu['enabled'] }}" }
    - { src: nginx_templates/mailu_maps.tmpl, dest: "{{ containers['config_dir'] }}/nginx-proxy/templates/", enabled: "{{ mailu['enabled'] }}" }
    - { src: nginx_proxy/conf.d/nextcloud.http.conf, dest: "{{ containers['config_dir'] }}/nginx-proxy/conf.d/", enabled: "{{ nextcloud['enabled'] }}" }
    - { src: nginx_proxy/conf.d/collabora-online.http.conf, dest: "{{ containers['config_dir'] }}/nginx-proxy/conf.d/",
        enabled: "{{ collabora_office['enabled'] }}" }
  when: item.enabled|bool

- name: Set fact with nginx-proxy container ports.
  ansible.builtin.set_fact:
    proxy_ports: "{{ proxy_ports | default([]) + [item.port] }}"
  loop:
    - { port: '80:80', enabled: true }
    - { port: '443:443', enabled: "{{ ssl_need }}" }
    - { port: '53:53/tcp', enabled: "{{ dns['enabled'] }}" }
    - { port: '53:53/udp', enabled: "{{ dns['enabled'] }}" }
    - { port: '25:25', enabled: "{{ mailu['enabled'] }}" }
    - { port: '465:465', enabled: "{{ mailu['enabled'] }}" }
    - { port: '587:587', enabled: "{{ mailu['enabled'] }}" }
    - { port: '110:110', enabled: "{{ mailu['enabled'] }}" }
    - { port: '995:995', enabled: "{{ mailu['enabled'] }}" }
    - { port: '143:143', enabled: "{{ mailu['enabled'] }}" }
    - { port: '993:993', enabled: "{{ mailu['enabled'] }}" }
    - { port: '10025:10025', enabled: "{{ mailu['enabled'] }}" }
    - { port: '10143:10143', enabled: "{{ mailu['enabled'] }}" }
  when: item.enabled|bool

- name: Include self-signed certficate generation tasks.
  ansible.builtin.include_tasks: cert_gen.yml
  when: ssl_need|bool

- name: Flush handles before start nginx-proxy container
  ansible.builtin.meta: flush_handlers

- name: Include tasks to start nginx with self-signed certificates.
  ansible.builtin.include_tasks: self-signed.yml
  when: ssl_need|bool and not certbot_needed|bool

- name: Include certbot tasks.
  ansible.builtin.include_tasks: certbot.yml
  when: certbot_needed|bool

- name: Include certbot service tasks.
  ansible.builtin.include_tasks: certbot_systemd_services.yml
  when: certbot_needed|bool

- name: Include task to launch container without ssl.
  ansible.builtin.include_tasks: non_ssl.yml
  when: not ssl_need|bool
