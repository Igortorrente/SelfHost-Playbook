---
# Default password length for the password generated automatically.
# Default value: 32
#password_length:

# Each major component have "struct" that contain all information
# used by the roles to do their work.
# They may contain options to change some specific behavior in the roles.
# The present values are the default values and you can change
# to meet your needs.
# All options have default values, unless specified.

server:
    # Use this variable set the time zone of the the server and constainers.
    # If not set, the containers will use the server timezone.
    # Valid values: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: Etc/UTC
    network:
        # The domain of the server. This will be used as a base to the
        # services subdomains.
        domain_name: example.com
        # The IPV4 of the server. The IP address that will be used to expose
        # the server to the internet (if the server have direct access to it)
        # or local network.
        # You can leave it empty and an IP will be automaticaly picked.
        # ** It's highly recommended to set this variable **
        #ipv4: 170.187.134.150
        # The IPV6 of the server.
        # You can leave it empty and an IP will be automaticaly picked.
        # ** It's highly recommended to set this variable **
        #ipv6: 2100:3c0b::f0fc:93af:fe3e:629a

# General containers config
containers:
    # Absolut path the folder that will contain all the data of the containers.
    # This includes the database, configs, let's encrypt keys, netcloud data, etc.
    # It's recomended that this folder to have some data integrity measures to
    # protect the data(RAID 5 or 6).
    data_dir: "{{ ansible_user_dir }}/containers_data"
    # This folder will contain the cache used by some services.
    cache_dir: "{{ ansible_user_dir }}/containers_cache"
    # This folder will contain the config used by some services.
    config_dir: "{{ ansible_user_dir }}/containers_config"
    # This folder will contain the containers's logs of some services.
    logs_dir: "{{ ansible_user_dir }}/containers_logs"
    # This network is a second loopback interface used for some containers
    # when they need expose any port to the host without exposing it outside
    # the server.
    loopback_network_address: 10.0.0.1
    # Containers network subnet
    subnet: 192.168.203.0/24

# Postgres configs "struct"
postgres:
    # https://hub.docker.com/_/postgres
    container_version: 16-bookworm
    # Postgres superuser name.
    admin_user: postgres
    # The password for the postgres superuser.
    #admin_passwd:
    # The default database name.
    admin_db: main

redis:
    # https://hub.docker.com/_/redis
    container_version: 6-bookworm

nginx_proxy:
    # https://hub.docker.com/_/nginx
    container_version: 1.25
    certbot:
        enabled: false
        # https://hub.docker.com/_/nginx
        container_version: v1.32.2
        # Email used to to register to receive notification
        # about the certificate expiration.
        # ** This must be set with a valid email **
        # ** Don't put the services_mail email **
        email: test@example.com

# bind9 DNS
dns:
    # This will be required by the mail server and it can work standalone.
    enabled: false
    # https://hub.docker.com/r/internetsystemsconsortium/bind9/tags
    container_version: 9.19
    # Enable/disables the IPv6 record to the services
    AAAA_records: true

# A very simple static homepage for your server.
# https://github.com/bastienwirtz/homer#using-docker
homer:
    enabled: true
    # https://hub.docker.com/r/b4bz/homer
    container_version: latest

# Setups VPN to access the admin interface of some services.
# When enabled all admin interfaces will not be accessible without
# the VPN connection
admin_wireguard:
    enabled: true
    # The wg0 interface address
    address: 20.0.0.1/24
    # The ip of
    allowed_ip: 20.0.0.2/32
    listen_port: 51820

# Keycloak is open source identity and access management that can
# provide Oauth2 and OpenID server for some services.
keycloak:
    # https://quay.io/repository/keycloak/keycloak?tab=tags
    container_version: 23.0
    # The keycloak admin username.
    admin: admin
    # The password for the keycloak admin user.
    #admin_password:
    # The name of the new realm that will be used by other services
    realm_name: main
    # Keycloak postgres admin username. This user will be used
    # to setup and access the postgres database for keycloak.
    postgres_user: keycloak
    # Keycloak postgres password.
    #postgres_password:
    # Keycloak database name in postgres.
    db_name: keycloak_db
    # Enables/disabled keycloak metrics endpoint
    metrics: false
    # Enables/disabled keycloak health endpoint
    health: true

# Mail server
mailu:
    enabled: true
    # https://hub.docker.com/u/mailu
    container_version: 1.9
    # mailu postgres admin username. This user will be used
    # to setup and access the postgres database for mailu.
    postgres_user: mailu
    # mailu postgres password.
    #postgres_password:
    # mailu database name in postgres.
    db_name: mailu_db
    # The mail domain that will be created.
    mail_domain: "{{ server['network']['domain_name'] }}"
    # Random 16 bytes string used by mailu.
    #secret_key:
    # The admin user account.
    # It also used as user for DMARC RUA/RUF.
    # The value here will concatenated with '@{{ mailu['mail_domain'] }}'
    # to define the account. Ex: 'admin' + '@example.com'
    postmaster: admin
    # Postmaster password
    # postmaster_password:
    # This is the name that will be used to identify the mail provider
    # in the admin site.
    # Use the name of your domain or organization
    site_name: Example
    # Roundcube webmail
    roundcube:
        # ** Roundcube will not be installed if mailu isn't **
        enabled: true
        # roundcube postgres admin username. This user will be used
        # to setup and access the postgres database for roundcube.
        postgres_user: roundcube
        # roundcube postgres password.
        #postgres_password:
        # roundcube database name in postgres.
        db_name: roundcube_db
    # Set information about the client.
    # Check https://www.oauth.com/oauth2-servers/definitions/
    # for more information.
    OIDC:
      enabled: true
      # OIDC client identification
      client_id: mailu
      # OIDC client secret
      #client_secret:
      # Text in the OIDC button at login screen
      button_name: Connect with Accounts Example.com
    # The used email for the other services(nextcloud, vaultwarden, keycloak)
    # for their needs.
    services_mail:
        # ** This also enables and override any value at services_mail **
        enabled: true
        # No-reply user account.
        # This work the same way as the postmaster. The user name
        # will be concatenated with '@{{ mailu['mail_domain'] }}'
        username: no_reply
        # No reply account password
        #password:
    # Automatic email retrieval (from 3rd-party servers).
    # Enables or disable fetchmail
    fetchmail: false
    # ClamAV® is an open-source antivirus engine for detecting
    # trojans, viruses, malware & other malicious threats.
    # Enable or disable antivirus
    clamav: false

# Several services uses a smtp server to send emails. Like
# reset password, accounts logins, notifications, etc.
# This playbook can configure it for you for enabled services.
# You can also use the mailu['services_mail'] as a service email if
# enable everything properly.
# ** All fields will be ignored if mailu['services_mail'] is enabled **
# ** This struct doesn't have default values **
# ** This is a global services_mail config for all enabled services **
services_mail:
    enabled: false
    # Valid values: starttls tls off
    smtp_securty: tls
    sender_name: no-reply
    # Valid values: plain login
    smtp_auth_type: login
    smtp_host: example.com
    mail_domain: example.com
    # Mail server port. Generally:
    # starttls 587 or 25, tls 465, off 25
    smtp_port: 465
    smtp_name: no-reply@example.com
    # Mail password
    smtp_password: Password

nextcloud:
    enabled: true
    # https://hub.docker.com/_/nextcloud
    container_version: 28-fpm
    # https://registry.hub.docker.com/r/nginxinc/nginx-unprivileged
    nginx_version: 1.25
    # https://github.com/nextcloud/notify_push/
    notify_version: 0.6.10
    # The nextcloud postgres admin username. This user will be used
    # to setup and access the postgres database for nextcloud.
    postgres_user: nextcloud
    # The nextcloud postgres password.
    #postgres_password:
    # Keycloak database name in postgres.
    db_name: nextcloud_db
    # The nextcloud admin username.
    admin: admin
    # The password for the nextcloud admin user.
    #admin_password:
    # Only used, when the browser does not send any language, and the user
    # hasn’t configured own language preferences.
    # Valid values: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
    default_language: en
    # Sets the 'default_phone_region' nextcloud variables, avoiding
    # a warning.
    # valid values: https://en.wikipedia.org/wiki/ISO_3166-1
    phone_region: GB
    # Enables/disabled the high performance files backend for
    # nextcloud
    notify_push: true
    # Enabled the collabora office intrationg with nextcloud
    collabora_office: true
    # Set information about the client.
    # Check https://www.oauth.com/oauth2-servers/definitions/
    # for more information.
    OIDC:
        enabled: true
        # OIDC client identification
        client_id: nextcloud
        # OIDC client secret
        #client_secret:
        # The name used by nextcloud user_oicd app to select the OIDC provider
        identifier: keycloak
        # When enable, this option will configure nextcloud user_oidc app
        # to always redirect the user to the keycloak login screen instead
        # the default nextcloud login.
        # You can access the nextcloud login screen using this URL
        # https://{{ server['network']['domain_name'] }}/login?direct=1
        allow_multiple_user_backends: true
    # The list of Nextcloud app that will be installed and enabled.
    # If you do not set this variable, no app will be installed.
    enable_apps:
      - calendar
      - tasks
      - notes
      - contacts
      - metadata
    # Same idea as nextcloud_apps, but here we will disable the apps
    # in the list
    # If you do not set this variable, no app will be disabled.
    disable_apps:
      - firstrunwizard
      - password_police

collabora_office:
    # https://hub.docker.com/r/collabora/code/tags
    container_version: 23.05.9.2.1
    # Collabora office admin username.
    admin: admin
    # Password for the Collabora office admin user.
    #admin_password:

vaultwarden:
    enabled: true
    # https://github.com/dani-garcia/vaultwarden
    # https://hub.docker.com/r/vaultwarden/server/tags
    container_version: 1.30.5
    # Vaultwarden postgres admin username. This user will be used
    # to setup and access the postgres database for vaultwarden.
    postgres_user: vaultwarden
    # Vaultwarden postgres password.
    #postgres_password:
    # Vaultwarden database name in postgres.
    db_name: vaultwarden_db
    # Control whether or not the admin panel will be available
    admin_panel: true
    # Token for the admin interface.
    #admin_token
    # Name shown in the invitation emails that don't come from a
    # specific organization
    invitation_org_name: "{{ server['network']['domain_name'] }}"

ssh_hardening:
    enabled: false

# Install and configures unattended-upgrades
unattended_upgrades:
    enabled: true
    # Control if on a unclean dpkg exit unattended-upgrades will automatically run
    # dpkg --force-confold --configure -a
    auto_fix_interrupted_dpkg: true
    # Install all updates when the machine is shutting down
    install_on_shutdown: false
    # Remove unused automatically installed kernel-related packages
    remove_unused_kernel_packages: false
    # Do automatic removal of newly unused dependencies after the upgrade
    remove_new_unused_dependencies: false
    # Do automatic removal of unused packages after the upgrade
    remove_unused_dependencies: false
    # Automatically reboot *WITHOUT CONFIRMATION* if necessary
    automatic_reboot: false
    # Use apt bandwidth limit feature (kb/sec)
    dl_limit: 512
    # Allow package downgrade if Pin-Priority exceeds 1000
    allow_downgrade: false

# List of optional roles.
# If you set as false, the role and related tasks in other roles will not
# be executed.
optional_roles:
    vim: true
    zsh: true
    # enables fail2ban for some services. (Currently only vaultwarden)
    fail2ban: true
